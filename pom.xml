<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>me.asu</groupId>
  <artifactId>asu-toolkit</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <properties>
    <!-- MAVEN 配置 -->
    <!-- 用 release=8，比 source/target 更稳（JDK9+ 提供），输出 Java 8 字节码 -->
<!--    <maven.compiler.release>8</maven.compiler.release>-->
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <maven.test.skip>true</maven.test.skip>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!-- 选 Java 8 仍支持的分支 -->
    <slf4j.version>1.7.36</slf4j.version>      <!-- 1.7.x 仍兼容 8；2.x 需要配合 logback 1.4+（Java11+） -->
    <logback.version>1.2.13</logback.version>  <!-- 1.2.x 支持 8；1.4.x 需要 Java 11+ -->
    <lombok.version>1.18.30</lombok.version>   <!-- 兼容 8 -->
    <jackson.version>2.16.2</jackson.version>  <!-- 仍支持 8 -->
    <junit4.version>4.13.2</junit4.version>

    <servlet-api.version>3.1.0</servlet-api.version>
    <netty.version>4.1.15.Final</netty.version>
  </properties>
  <!-- 可选：用 Boot 2.7.x 的 BOM 管控常见三方库（而非 Boot 3） -->
  <!-- 只做 dependencyManagement，不引入 spring-boot-starter* 也没关系 -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>2.7.18</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!-- asu-log binding for SLF4J (1.7.x compatible) -->
      <dependency>
        <groupId>com.github.bruceasu.asu-log</groupId>
        <artifactId>asu-log-minlog</artifactId>
        <version>v1.0.1</version>
      </dependency>
      <dependency>
        <groupId>com.github.bruceasu.asu-log</groupId>
        <artifactId>asu-log-slf4j</artifactId>
        <version>v1.0.1</version>
      </dependency>
      <dependency>
        <groupId>com.github.bruceasu.asu-log</groupId>
        <artifactId>asu-log-slf4j2</artifactId>
        <version>v1.0.1</version>
      </dependency>
      <dependency>
        <groupId>com.github.bruceasu.asu-log</groupId>
        <artifactId>asu-log-to-slf4j</artifactId>
        <version>v1.0.1</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.bruceasu.asu-log</groupId>
      <artifactId>asu-log-minlog</artifactId>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>${servlet-api.version}</version>
      <scope>provided</scope>
    </dependency>


  </dependencies>
  <build>
    <plugins>
      <!-- lombok -->
      <plugin>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok-maven-plugin</artifactId>
        <version>1.18.20.0</version>
        <configuration>
          <encoding>utf-8</encoding>
        </configuration>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>delombok</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- 编译：用 release=8 输出 1.8 字节码（即使在 JDK17/21 上编译 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
<!--          <release>${maven.compiler.release}</release>-->
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
          <encoding>${project.build.sourceEncoding}</encoding>
          <compilerArgs>
            <!--<arg>-verbose</arg>-->
            <arg>-parameters</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <!-- Enforcer：阻止用错 JDK & 插件太旧 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.5.0</version>
        <executions>
          <execution>
            <goals><goal>enforce</goal></goals>
            <configuration>
              <rules>
                <!-- 构建机可用更高 JDK，但输出 release=8；若你强制要求用 JDK8 构建，可设 [1.8,1.9) -->
                <requireJavaVersion>
                  <version>[1.8,)</version>
                </requireJavaVersion>
                <requireMavenVersion>
                  <version>[3.6.3,)</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- jar -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.4.2</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>false</addDefaultImplementationEntries>
              <addDefaultSpecificationEntries>false</addDefaultSpecificationEntries>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <!--<mainClass>com.xxg.Main</mainClass>-->
            </manifest>
            <manifestEntries>
              <Specification-Title>${project.artifactId}</Specification-Title>
              <Specification-Version>${project.version}</Specification-Version>
              <Implementation-Title>${project.name}</Implementation-Title>
              <Implementation-Version>${project.version}</Implementation-Version>
              <Built-By>Base Platform Team</Built-By>
              <Automatic-Module-Name>me.asu.toolkits</Automatic-Module-Name>
            </manifestEntries>
          </archive>
          <!-- 由具体的项目自己指定 -->
          <!--<excludes>-->
          <!--<exclude>**/*.properties</exclude>-->
          <!--<exclude>**/*.xml</exclude>-->
          <!--<exclude>**/*.json</exclude>-->
          <!--<exclude>**/*.groovy</exclude>-->
          <!--<exclude>**/*.py</exclude>-->
          <!--<exclude>**/*.jar</exclude>-->
          <!--</excludes>-->
        </configuration>
      </plugin>

      <!-- source -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>install</phase>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- javadoc -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.6.3</version>
        <configuration>
          <!-- 配置无效，配置全局环境变量
               JAVA_TOOL_OPTIONS =  -Dfile.encoding=UTF-8
          -->
          <charset>UTF-8</charset>
          <encoding>UTF-8</encoding>
          <show>private</show>
          <nohelp>true</nohelp>
          <doclint>none</doclint>
        </configuration>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <phase>install</phase>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- install -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <version>2.3.1</version>
      </plugin>
      <!-- deploy -->
      <!-- <plugin> -->
      <!--   <groupId>org.apache.maven.plugins</groupId> -->
      <!--   <artifactId>maven-deploy-plugin</artifactId> -->
      <!--   <version>2.8.2</version> -->
      <!--   <configuration> -->
      <!--     <uniqueVersion>false</uniqueVersion> -->
      <!--   </configuration> -->
      <!-- </plugin> -->
      <!-- surefire -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skip>${maven.test.skip}</skip>
        </configuration>
      </plugin>

      <!-- 可选：签名/发布时使用（如要发中央仓库再开启） -->
      <!--
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-gpg-plugin</artifactId>
        <version>3.2.4</version>
        <executions>
          <execution>
            <id>sign-artifacts</id>
            <phase>verify</phase>
            <goals><goal>sign</goal></goals>
          </execution>
        </executions>
      </plugin>
      -->
    </plugins>
  </build>
  <repositories>
    <repository>
      <id>jitpack.io</id>
      <url>https://jitpack.io</url>
    </repository>
  </repositories>
  <!-- 如需发布到 Nexus，配置 distributionManagement（按你的 Nexus 地址改） -->
  <!--
  <distributionManagement>
    <repository>
      <id>nexus-releases</id>
      <url>https://nexus.example.com/repository/maven-releases/</url>
    </repository>
    <snapshotRepository>
      <id>nexus-snapshots</id>
      <url>https://nexus.example.com/repository/maven-snapshots/</url>
    </snapshotRepository>
  </distributionManagement>
  -->
</project>